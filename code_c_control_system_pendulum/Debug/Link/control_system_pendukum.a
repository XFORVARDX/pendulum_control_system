;/*******************************************************
;This program was created by the CodeWizardAVR V3.27
;Project : DIPLOM
;Version :
;Date    : 17.04.2024
;Author  : FORVARD
;Company : KB52
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdio.h>
;#include <math.h>
;#include <stdint.h>
;#include <mega328p.h>
;#include <peripherals.h>
;
;
;void setPORTS(void){
; 0000 001A void setPORTS(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    // Port B initialization
;    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
;    DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
;    PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;    // Port C initialization
;    // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
;    DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;    // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
;    PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;    // Port D initialization
;    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
;    DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
;    PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;}
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;void setCLK(void){
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;    // Crystal Oscillator division factor: 1
;    #pragma optsize-
;    CLKPR=(1<<CLKPCE);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;    CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;    #ifdef _OPTIMIZE_SIZE_
;    #pragma optsize+
;    #endif
;}
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void setTimers(void){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;    // Timer/Counter 0 initialization
;    // Clock source: System Clock
;    // Clock value: 15,625 kHz
;    // Mode: Normal top=0xFF
;    // OC0A output: Disconnected
;    // OC0B output: Disconnected
;    // Timer Period: 16,384 ms
;    TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;    TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;    TCNT0=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;    OCR0A=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;    OCR0B=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;
;    // Timer/Counter 0 Interrupt(s) initialization
;    TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;
;    // Timer/Counter 1 initialization
;    // Clock source: System Clock
;    // Clock value: 2000,000 kHz
;    // Mode: Ph. correct PWM top=0x00FF
;    // OC1A output: Non-Inverted PWM
;    // OC1B output: Disconnected
;    // Noise Canceler: Off
;    // Input Capture on Falling Edge
;    // Timer Period: 0,255 ms
;    // Output Pulse(s):
;    // OC1A Period: 0,255 ms Width: 0,127 ms
;    // Timer1 Overflow Interrupt: Off
;    // Input Capture Interrupt: Off
;    // Compare A Match Interrupt: Off
;    // Compare B Match Interrupt: Off
;    TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (1<<WGM10);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;    TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;    TCNT1H=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;    TCNT1L=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;    ICR1H=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;    ICR1L=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;    OCR1AH=0xFF;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;    OCR1AL=0xFA;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;    OCR1BH=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;    OCR1BL=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;    // Timer/Counter 1 Interrupt(s) initialization
;    TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;}
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;void setEXT(void){
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;    // External Interrupt(s) initialization
;    // INT0: On
;    // INT0 Mode: Rising Edge
;    // INT1: Off
;    // Interrupt on any change on pins PCINT0-7: Off
;    // Interrupt on any change on pins PCINT8-14: Off
;    // Interrupt on any change on pins PCINT16-23: Off
;    EICRA=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;    EIMSK=(0<<INT1) | (1<<INT0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;    EIFR=(0<<INTF1) | (1<<INTF0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;    PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;}
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;void uartconfig(void){
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;    // USART initialization
;    // Communication Parameters: 8 Data, 1 Stop, No Parity
;    // USART Receiver: Off
;    // USART Transmitter: On
;    // USART Mode: Asynchronous
;
;    // Настройка UART на скорость 115200
;    UCSR0A = (1 << U2X0);  // Включение режима двойной скорости (если требуется)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;    UCSR0B = (0 << RXCIE0) | (0 << TXCIE0) | (0 << UDRIE0) | (0 << RXEN0) | (1 << TXEN0) | (0 << UCSZ02) | (0 << RXB80)  ...
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;    UCSR0C = (0 << UMSEL01) | (0 << UMSEL00) | (0 << UPM01) | (0 << UPM00) | (0 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00 ...
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;    // Установка baud rate
;    UBRR0H = 0x00;  // Старший байт UBRR0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;    UBRR0L = 0x10;  // Младший байт UBRR0 (для U2X0 = 1)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;    // Включение приемника и передатчика
;    UCSR0B = (1 << RXEN0) | (1 << TXEN0)| (1 << RXCIE0);;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;    //// Включение прерывания по завершению приема данных (RX Complete)
;    UCSR0B |= (1 << RXCIE0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;}
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;void send_byte(uint8_t byte){
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;    while (!(UCSR0A & (1 << UDRE0))); // ждём готовности
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;	byte -> R17
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;    UDR0 = byte;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;}
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;// === Расчёт CRC8 ===
;uint8_t calculate_crc(uint8_t *data, uint8_t len) {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;    uint8_t crc = 0;
;    int i;
;    for ( i = 0; i < len; i++) {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	*data -> R20,R21
;	len -> R16
;	crc -> R17
;	i -> R18,R19
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;        crc = data[i] ^ crc;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;    }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;    return crc;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;}
;PCODE: $0000009A VOL: 0
;#include "createmassiveSIN.h"
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;#define dt 0.0163
;
;
;#define PACKET_SIZE 9
;#define PREAMBLE 0x88
;
;typedef struct {
;    uint8_t preamble;
;    uint8_t type;
;    uint8_t length;
;    uint8_t data[6];
;    uint8_t crc;
;} Packet;
;
;Packet rx_packet;
;volatile uint8_t rx_index = 0;
;volatile uint8_t packet_received = 0;
;
;volatile int ugol = 0;
;unsigned char byte1,byte2,byte3,byte4 ;
;int32_t result = 0;    // результат функции
;//задаем параметры функции синуса(из которой будем получать ошибку) y = A*sin(T*t)
;int32_t A = 60 ;//амплитуда , потом будем задавать матлабом

	.DSEG
;int T = 3 ; // период , потом будем принимать с матлаба    //3~0.684 ms  каждое увеличение в 2 раза
;int32_t error = 0;// для расчета ошибки
;int time12 = 0;
;int flag = 0;
;
;int32_t integral = 0;       // Интегральная составляющая
;int32_t previous_error = 0; // Предыдущее значение ошибки
;int32_t derivative;
;//коэффициенты ПИД регулятора
;volatile int16_t Kp = 200;
;volatile int16_t Ki = 0;
;volatile int16_t Kd = 1;
;uint8_t flagPWM = 0;
;uint32_t pwm_value = 0;
;uint32_t my_abs(int32_t value) {
; 0000 0041 uint32_t my_abs(int32_t value) {

	.CSEG
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0042     return (value < 0) ? -value : value;
;PCODE: $000000F3 VOL: 0
;	value -> Y+0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0043 }
;PCODE: $00000100 VOL: 0
;uint8_t flagT = 0   ;
;uint8_t flagA = 0   ;
;uint8_t flagP = 0   ;
;uint8_t flagI = 0   ;
;uint8_t flagD = 0   ;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 004C {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 004D                   //PORTB ^= (1 << PORTB5); // Переключение состояния светодиода L (PB5)
; 0000 004E if (PINB.4 == 1)
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 004F {
; 0000 0050   ugol++;
;PCODE: $00000106 VOL: 1
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0051 }
; 0000 0052 else
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0053 {
; 0000 0054   ugol--;
;PCODE: $0000010C VOL: 1
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0055 }
;PCODE: $00000110 VOL: 0
; 0000 0056 EIFR |= (1 << INTF0); // Установка флага INTF0 для вызова прерывания INT0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0057 }
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 005A 
; 0000 005B {
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 005C         //PORTB ^= (1 << PORTB5); // Переключение состояния светодиода L (PB5)
; 0000 005D 
; 0000 005E         byte1 = (ugol >> 8) & 0xFF;
;PCODE: $00000118 VOL: 1
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 005F         byte2 = ugol & 0xFF;
;PCODE: $0000011C VOL: 1
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0060         putchar(0x1c);   // преамбула для пакета угла
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0061         putchar(byte1);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0062         putchar(byte2);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0063         byte1 = (pwm_value >> 8) & 0xFF;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0064         byte2 = pwm_value & 0xFF;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0065         putchar(0x2d);  // преамбула для пакета управления
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0066         putchar(byte1);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0067         putchar(byte2);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0068         byte4 = (error >> 24) & 0xFF;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0069         byte3 = (error >> 16) & 0xFF;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 006A         byte1 = (error >> 8) & 0xFF;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 006B         byte2 = error & 0xFF;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 006C         putchar(0x2c);       // преамбула для ошибки
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 006D         putchar(byte4);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 006E         putchar(byte3);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 006F         putchar(byte1);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0070         putchar(byte2);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0071         time12=time12+100;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0072         if(time12>(samls*(1<<T)))time12 = 0;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0073         if(time12>16128)time12 =0;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0074 
; 0000 0075         //cordic
; 0000 0076         //PORTB ^= (1 << PORTB5); // Переключение состояния светодиода L (PB5)
; 0000 0077 
; 0000 0078         //result =  A*sin(0.016384*T*time12*2*PI);
; 0000 0079         //error = (A*((sin_ugol[ugol>>1])) -  result)/100;
; 0000 007A         //error =((int16_t)(A*sin(ugol/1.39*PI/180))) - result;
; 0000 007B         //    //error = (int16_t)(error>>2);
; 0000 007C         result = A*(fix16_sin[(time12>>T)]);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 007D         error = (A*((sin_ugol[ugol>>1])) -  result)/100;
;PCODE: $0000016A VOL: 1
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 007E         // Вычисление интегральной составляющей
; 0000 007F         integral += error * dt;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0080         // Вычисление дифференциальной составляющей
; 0000 0081         derivative = error - previous_error;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0082         pwm_value = (my_abs(Kp * error + Ki * integral + Kd * derivative)/10);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 1
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 1
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 1
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0083 
; 0000 0084 
; 0000 0085         if (pwm_value > 65535) {
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0086             pwm_value = 65535;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0087 
; 0000 0088         }
; 0000 0089         if (error<0){
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 008A 
; 0000 008B             if(flagPWM == 0){
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 008C             flagPWM = 1;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 008D             PORTD.7 = 0;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 008E             PIND.6=1;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 008F             }
; 0000 0090             if(pwm_value <= 65535){
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0091                OCR1AH = (pwm_value >> 8) & 0xFF; // Высший байт
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0092                OCR1AL = pwm_value & 0xFF; // Нижний байт
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0093             }
; 0000 0094         }
;PCODE: $000001BA VOL: 0
; 0000 0095             else if(error>0){
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0096             if(flagPWM == 1)
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0097             {
; 0000 0098             flagPWM = 0;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0099             PORTD.7 = 1;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 009A             PIND.6 = 0;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 009B             }
; 0000 009C             if(pwm_value <= 65535) {
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 009D                 OCR1AH = (pwm_value >> 8) & 0xFF; // Высший байт
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 009E                 OCR1AL = pwm_value & 0xFF; // Нижний байт
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 009F             }
; 0000 00A0             else {
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00A1                 OCR1BH = 0;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00A2                 OCR1BL = 0;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00A3                previous_error = 0;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00A4             }
;PCODE: $000001DD VOL: 0
; 0000 00A5 
; 0000 00A6         }
; 0000 00A7     previous_error =  error;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00A8     //PORTB ^= (1 << PORTB5); // Переключение состояния светодиода L (PB5)
; 0000 00A9 }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;// Declare your global variables here
;interrupt[USART_RXC] void usartRX_data(void) {
; 0000 00AB interrupt[19] void usartRX_data(void) {
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00AC     int i = 0;
; 0000 00AD     uint8_t ack[5] = {0x88, 0x01, 0x01, 0x00, 0x00};
; 0000 00AE     uint8_t calc_crc ;
; 0000 00AF     static uint8_t state = 0;
; 0000 00B0     uint8_t received_data = UDR0;
; 0000 00B1     switch (state)
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;	i -> R16,R17
;	ack -> Y+4
;	calc_crc -> R19
;	received_data -> R18
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00B2            {
; 0000 00B3 
; 0000 00B4            case 0: if (received_data == PREAMBLE) state++;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 00B5            else state = 0;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 00B6            break;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 00B7 
; 0000 00B8            case 1:   rx_packet.type = received_data;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00B9            state++;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00BA 
; 0000 00BB            break;
;PCODE: $00000210 VOL: 0
; 0000 00BC            case 2: rx_packet.length = received_data; state++; break;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 00BD            case 3: if (rx_index < rx_packet.length) {
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 1
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 00BE                     rx_packet.data[rx_index++] = received_data;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 1
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 1
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 00BF                     if (rx_index == rx_packet.length) state++;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 1
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 00C0                 }
;PCODE: $00000234 VOL: 0
; 0000 00C1                 break;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 00C2            case 4: rx_packet.crc = received_data;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 00C3                 calc_crc = calculate_crc((uint8_t*)&rx_packet, rx_index + 3); // без CRC
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 1
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 00C4                 if (calc_crc == rx_packet.crc) {
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 00C5                     // Пакет корректный
; 0000 00C6                     switch(rx_packet.type) {
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 00C7                         case 0x02: { // установка PID
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 00C8                             Kp = (rx_packet.data[0] << 8) | rx_packet.data[1];
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 1
; 0000 00C9                             Ki = (rx_packet.data[2] << 8) | rx_packet.data[3];
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 1
; 0000 00CA                             Kd = (rx_packet.data[4] << 8) | rx_packet.data[5];
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 1
; 0000 00CB                             // Отправить подтверждение
; 0000 00CC                             ack[4] = calculate_crc(ack, 5);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 00CD                             for (i = 0; i < 5; i++) {
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 00CE                                 send_byte(ack[i]);
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 00CF                             }
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 00D0                         } break;
;PCODE: $0000027E VOL: 0
; 0000 00D1                     }
;PCODE: $0000027F VOL: 0
; 0000 00D2                 }
; 0000 00D3                 state = 0;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 00D4                 rx_index = 0;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 1
; 0000 00D5                 packet_received = 1;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 1
; 0000 00D6                 break;
;PCODE: $00000287 VOL: 0
; 0000 00D7            }
;PCODE: $00000288 VOL: 0
; 0000 00D8 //    if(received_data == 0x0A){
; 0000 00D9 //        flagA = 1;
; 0000 00DA //    }
; 0000 00DB //    if(flag == 1){
; 0000 00DC //        A = received_data;
; 0000 00DD //        flagA = 0;
; 0000 00DE //    }
; 0000 00DF //    if(received_data == 0x0B){
; 0000 00E0 //        flagT = 1;
; 0000 00E1 //    }
; 0000 00E2 //    if(flagT == 1){
; 0000 00E3 //        T = (received_data<<8);
; 0000 00E4 //        flagT = 2;
; 0000 00E5 //    }
; 0000 00E6 //    if(flagT == 2){
; 0000 00E7 //        T = T+received_data;
; 0000 00E8 //        flagT = 0;
; 0000 00E9 //    }
; 0000 00EA //    if(received_data == 0x1A){
; 0000 00EB //        flagP = 1;
; 0000 00EC //    }
; 0000 00ED //    if(flagP == 1){
; 0000 00EE //        Kp = (received_data<<8);
; 0000 00EF //        flagP = 2;
; 0000 00F0 //    }
; 0000 00F1 //    if(flagP == 2){
; 0000 00F2 //        Kp = Kp + received_data;
; 0000 00F3 //        flagP = 0;
; 0000 00F4 //    }
; 0000 00F5 //    if(received_data == 0x1B){
; 0000 00F6 //        flagI = 1;
; 0000 00F7 //    }
; 0000 00F8 //    if(flagI == 1){
; 0000 00F9 //        Ki = (received_data<<8);
; 0000 00FA //        flagI = 2;
; 0000 00FB //    }
; 0000 00FC //    if(flagI == 2){
; 0000 00FD //        Ki = Ki + received_data;
; 0000 00FE //        flagI = 0;
; 0000 00FF //    }
; 0000 0100 //    if(received_data == 0x1F){
; 0000 0101 //        flagD = 1;
; 0000 0102 //    }
; 0000 0103 //    if(flagD == 1){
; 0000 0104 //        Kd = (received_data<<8);
; 0000 0105 //        flagD = 2;
; 0000 0106 //    }
; 0000 0107 //    if(flagD == 2){
; 0000 0108 //        Kd = Kd + received_data;
; 0000 0109 //        flagD = 0;
; 0000 010A //    }
; 0000 010B }
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;
;
;void main(void)
; 0000 010F {
;PCODE: $0000028E VOL: 0
; 0000 0110 
; 0000 0111     //peripherals config
; 0000 0112     setCLK();
;PCODE: $0000028F VOL: 0
; 0000 0113     setPORTS();
;PCODE: $00000290 VOL: 0
; 0000 0114     setTimers();
;PCODE: $00000291 VOL: 0
; 0000 0115     setEXT();
;PCODE: $00000292 VOL: 0
; 0000 0116     uartconfig();
;PCODE: $00000293 VOL: 0
; 0000 0117 
; 0000 0118 
; 0000 0119     #asm("sei")
;PCODE: $00000294 VOL: 0
; 0000 011A     PIND.6=0;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 011B     PORTB.5 = 0;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 011C     PORTD.7 = 0;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 011D     PORTB.1 = 1;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 011E     generSin();        // заполнениение массива синуса
;PCODE: $0000029D VOL: 0
; 0000 011F     generSinUgol();
;PCODE: $0000029E VOL: 0
; 0000 0120     PORTD.7 = 1;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 0121     PIND.6 = 0;
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 0122     OCR1BH = 244;
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0123     OCR1BL = 244;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0124 
; 0000 0125 
; 0000 0126     while (1)
;PCODE: $000002A7 VOL: 0
; 0000 0127     {
; 0000 0128         if (packet_received) {
;PCODE: $000002A8 VOL: 1
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 0129             // Обработка принятого пакета
; 0000 012A             packet_received = 0;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 1
; 0000 012B         }
; 0000 012C 
; 0000 012D         // result =A*datay[5];
; 0000 012E         //    if(time12>16128)time12 =0;
; 0000 012F         //    result = A*(fix16_sin[(time12>>6)]);
; 0000 0130         //    //result = 1966080;
; 0000 0131         //    //result =  A*sin(0.016384*T*time12*2*PI);
; 0000 0132         //    error = (A*((sin_ugol[ugol>>1])) -  result)/100;
; 0000 0133         //    //error =((int16_t)(A*sin(ugol/1.39*PI/180))) - result;
; 0000 0134         //    //error = (int16_t)(error>>2);
; 0000 0135         //    // Вычисление интегральной составляющей
; 0000 0136         //    integral += error * dt;
; 0000 0137         //    // Вычисление дифференциальной составляющей
; 0000 0138         //    derivative = error - previous_error;
; 0000 0139         //    pwm_value = (my_abs(Kp * error + Ki * integral + Kd * derivative)/100);
; 0000 013A         //    //pwm_value = (Y); // Преобразование float в uint16_t
; 0000 013B         //    //error = 1;
; 0000 013C         //                    //OCR1AH = 0xFF; // Высший байт
; 0000 013D         //
; 0000 013E         //    //OCR1AL = 254;
; 0000 013F         //        if (pwm_value > 65535) {
; 0000 0140         //            pwm_value = 65535;
; 0000 0141         //
; 0000 0142         //        }
; 0000 0143         //        if (error<0){
; 0000 0144         //            flagPWM = 1;
; 0000 0145         //            PORTD.7 = 0;
; 0000 0146         //            PIND.6=1;
; 0000 0147         //            if(pwm_value <= 65535){
; 0000 0148         //               //#asm("cli")
; 0000 0149         //               OCR1AH = (pwm_value >> 8) & 0xFF; // Высший байт
; 0000 014A         //               OCR1AL = pwm_value & 0xFF; // Нижний байт
; 0000 014B         //               //#asm("sei")
; 0000 014C         //            }
; 0000 014D         //        }
; 0000 014E         //            else if(error>0){
; 0000 014F         //            flagPWM = 0;
; 0000 0150         //            PORTD.7 = 1;
; 0000 0151         //            PIND.6 = 0;
; 0000 0152         //            if(pwm_value <= 65535) {
; 0000 0153         //                //#asm("cli")
; 0000 0154         //                OCR1AH = (pwm_value >> 8) & 0xFF; // Высший байт
; 0000 0155         //                OCR1AL = pwm_value & 0xFF; // Нижний байт
; 0000 0156         //                //#asm("sei")
; 0000 0157         //            }
; 0000 0158         //            else {
; 0000 0159         //                //OCR1BH = 0;
; 0000 015A         //                //OCR1BL = 0;
; 0000 015B         //                previous_error = 0;
; 0000 015C         //            }
; 0000 015D         //        }
; 0000 015E         //    previous_error =  error;
; 0000 015F         //    // OCR1AH = 0;
; 0000 0160 
; 0000 0161     }
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0162 }
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;
;
;
;
;
;
