;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 001A void setPORTS(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0

	.DSEG
;uint32_t my_abs(int32_t value) {
; 0000 0032 uint32_t my_abs(int32_t value) {

	.CSEG
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0033 return (value < 0) ? -value : value;
;PCODE: $000000C2 VOL: 0
;	value -> Y+0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0034 }
;PCODE: $000000CF VOL: 0
;interrupt [2] void ext_int0_isr(void)
; 0000 003D {
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 003E //PORTB ^= (1 << PORTB5); // Переключение состояния светодиода L (PB5)
; 0000 003F if (PINB.4 == 1)
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0040 {
; 0000 0041 ugol++;
;PCODE: $000000D5 VOL: 1
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0042 }
; 0000 0043 else
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0044 {
; 0000 0045 ugol--;
;PCODE: $000000DB VOL: 1
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0046 }
;PCODE: $000000DF VOL: 0
; 0000 0047 EIFR |= (1 << INTF0); // Установка флага INTF0 для вызова прерывания INT0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0048 }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;interrupt [17] void timer0_ovf_isr(void)
; 0000 004B 
; 0000 004C {
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 004D //PORTB ^= (1 << PORTB5); // Переключение состояния светодиода L (PB5)
; 0000 004E 
; 0000 004F byte1 = (ugol >> 8) & 0xFF;
;PCODE: $000000E7 VOL: 1
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0050 byte2 = ugol & 0xFF;
;PCODE: $000000EB VOL: 1
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0051 putchar(0x1c);   // преамбула для пакета угла
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0052 putchar(byte1);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0053 putchar(byte2);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0054 byte1 = (pwm_value >> 8) & 0xFF;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0055 byte2 = pwm_value & 0xFF;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0056 putchar(0x2d);  // преамбула для пакета управления
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0057 putchar(byte1);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0058 putchar(byte2);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0059 byte4 = (error >> 24) & 0xFF;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 005A byte3 = (error >> 16) & 0xFF;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 005B byte1 = (error >> 8) & 0xFF;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 005C byte2 = error & 0xFF;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 005D putchar(0x2c);       // преамбула для ошибки
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 005E putchar(byte4);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 005F putchar(byte3);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0060 putchar(byte1);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0061 putchar(byte2);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0062 time12=time12+100;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0063 if(time12>(samls*(1<<T)))time12 = 0;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0064 if(time12>16128)time12 =0;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0065 
; 0000 0066 //cordic
; 0000 0067 //PORTB ^= (1 << PORTB5); // Переключение состояния светодиода L (PB5)
; 0000 0068 
; 0000 0069 //result =  A*sin(0.016384*T*time12*2*PI);
; 0000 006A //error = (A*((sin_ugol[ugol>>1])) -  result)/100;
; 0000 006B //error =((int16_t)(A*sin(ugol/1.39*PI/180))) - result;
; 0000 006C //    //error = (int16_t)(error>>2);
; 0000 006D result = A*(fix16_sin[(time12>>T)]);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 006E error = (A*((sin_ugol[ugol>>1])) -  result)/100;
;PCODE: $00000139 VOL: 1
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 006F // Вычисление интегральной составляющей
; 0000 0070 integral += error * dt;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0071 // Вычисление дифференциальной составляющей
; 0000 0072 derivative = error - previous_error;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0073 pwm_value = (my_abs(Kp * error + Ki * integral + Kd * derivative)/10);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0074 
; 0000 0075 
; 0000 0076 if (pwm_value > 65535) {
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0077 pwm_value = 65535;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0078 
; 0000 0079 }
; 0000 007A if (error<0){
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 007B 
; 0000 007C if(flagPWM == 0){
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 007D flagPWM = 1;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 007E PORTD.7 = 0;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 007F PIND.6=1;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0080 }
; 0000 0081 if(pwm_value <= 65535){
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0082 OCR1AH = (pwm_value >> 8) & 0xFF; // Высший байт
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0083 OCR1AL = pwm_value & 0xFF; // Нижний байт
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0084 }
; 0000 0085 }
;PCODE: $00000189 VOL: 0
; 0000 0086 else if(error>0){
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0087 if(flagPWM == 1)
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0088 {
; 0000 0089 flagPWM = 0;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 008A PORTD.7 = 1;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 008B PIND.6 = 0;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 008C }
; 0000 008D if(pwm_value <= 65535) {
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 008E OCR1AH = (pwm_value >> 8) & 0xFF; // Высший байт
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 008F OCR1AL = pwm_value & 0xFF; // Нижний байт
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0090 }
; 0000 0091 else {
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0092 OCR1BH = 0;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0093 OCR1BL = 0;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0094 previous_error = 0;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0095 }
;PCODE: $000001AC VOL: 0
; 0000 0096 
; 0000 0097 }
; 0000 0098 previous_error =  error;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0099 //PORTB ^= (1 << PORTB5); // Переключение состояния светодиода L (PB5)
; 0000 009A }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;interrupt[19] void usartRX_data(void) {
; 0000 009C interrupt[19] void usartRX_data(void) {
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 009D // Чтение принятого байта из регистра UDR0
; 0000 009E uint8_t received_data = UDR0;
; 0000 009F if(received_data == 0x0A){
;PCODE: $000001B6 VOL: 0
;	received_data -> R17
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00A0 flagA = 1;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00A1 }
; 0000 00A2 if(flag == 1){
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00A3 A = received_data;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00A4 flagA = 0;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00A5 }
; 0000 00A6 if(received_data == 0x0B){
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00A7 flagT = 1;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 00A8 }
; 0000 00A9 if(flagT == 1){
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00AA T = (received_data<<8);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00AB flagT = 2;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00AC }
; 0000 00AD if(flagT == 2){
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00AE T = T+received_data;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00AF flagT = 0;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00B0 }
; 0000 00B1 if(received_data == 0x1A){
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00B2 flagP = 1;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00B3 }
; 0000 00B4 if(flagP == 1){
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 00B5 Kp = (received_data<<8);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00B6 flagP = 2;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00B7 }
; 0000 00B8 if(flagP == 2){
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00B9 Kp = Kp + received_data;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 00BA flagP = 0;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 00BB }
; 0000 00BC if(received_data == 0x1B){
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 00BD flagI = 1;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 00BE }
; 0000 00BF if(flagI == 1){
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00C0 Ki = (received_data<<8);
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 00C1 flagI = 2;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00C2 }
; 0000 00C3 if(flagI == 2){
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00C4 Ki = Ki + received_data;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 00C5 flagI = 0;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 00C6 }
; 0000 00C7 if(received_data == 0x1F){
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 00C8 flagD = 1;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 00C9 }
; 0000 00CA if(flagD == 1){
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 00CB Kd = (received_data<<8);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 00CC flagD = 2;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 00CD }
; 0000 00CE if(flagD == 2){
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 00CF Kd = Kd + received_data;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 00D0 flagD = 0;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 00D1 }
; 0000 00D2 }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;void main(void)
; 0000 00D6 {
;PCODE: $00000237 VOL: 0
; 0000 00D7 
; 0000 00D8 //peripherals config
; 0000 00D9 setCLK();
;PCODE: $00000238 VOL: 0
; 0000 00DA setPORTS();
;PCODE: $00000239 VOL: 0
; 0000 00DB setTimers();
;PCODE: $0000023A VOL: 0
; 0000 00DC setEXT();
;PCODE: $0000023B VOL: 0
; 0000 00DD uartconfig();
;PCODE: $0000023C VOL: 0
; 0000 00DE 
; 0000 00DF 
; 0000 00E0 #asm("sei")
;PCODE: $0000023D VOL: 0
; 0000 00E1 PIND.6=0;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 00E2 PORTB.5 = 0;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 00E3 PORTD.7 = 0;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 00E4 PORTB.1 = 1;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 00E5 generSin();        // заполнениение массива синуса
;PCODE: $00000246 VOL: 0
; 0000 00E6 generSinUgol();
;PCODE: $00000247 VOL: 0
; 0000 00E7 PORTD.7 = 1;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 00E8 PIND.6 = 0;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 00E9 OCR1BH = 244;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 00EA OCR1BL = 244;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 00EB 
; 0000 00EC 
; 0000 00ED while (1)
;PCODE: $00000250 VOL: 0
; 0000 00EE {
; 0000 00EF 
; 0000 00F0 // result =A*datay[5];
; 0000 00F1 //    if(time12>16128)time12 =0;
; 0000 00F2 //    result = A*(fix16_sin[(time12>>6)]);
; 0000 00F3 //    //result = 1966080;
; 0000 00F4 //    //result =  A*sin(0.016384*T*time12*2*PI);
; 0000 00F5 //    error = (A*((sin_ugol[ugol>>1])) -  result)/100;
; 0000 00F6 //    //error =((int16_t)(A*sin(ugol/1.39*PI/180))) - result;
; 0000 00F7 //    //error = (int16_t)(error>>2);
; 0000 00F8 //    // Вычисление интегральной составляющей
; 0000 00F9 //    integral += error * dt;
; 0000 00FA //    // Вычисление дифференциальной составляющей
; 0000 00FB //    derivative = error - previous_error;
; 0000 00FC //    pwm_value = (my_abs(Kp * error + Ki * integral + Kd * derivative)/100);
; 0000 00FD //    //pwm_value = (Y); // Преобразование float в uint16_t
; 0000 00FE //    //error = 1;
; 0000 00FF //                    //OCR1AH = 0xFF; // Высший байт
; 0000 0100 //
; 0000 0101 //    //OCR1AL = 254;
; 0000 0102 //        if (pwm_value > 65535) {
; 0000 0103 //            pwm_value = 65535;
; 0000 0104 //
; 0000 0105 //        }
; 0000 0106 //        if (error<0){
; 0000 0107 //            flagPWM = 1;
; 0000 0108 //            PORTD.7 = 0;
; 0000 0109 //            PIND.6=1;
; 0000 010A //            if(pwm_value <= 65535){
; 0000 010B //               //#asm("cli")
; 0000 010C //               OCR1AH = (pwm_value >> 8) & 0xFF; // Высший байт
; 0000 010D //               OCR1AL = pwm_value & 0xFF; // Нижний байт
; 0000 010E //               //#asm("sei")
; 0000 010F //            }
; 0000 0110 //        }
; 0000 0111 //            else if(error>0){
; 0000 0112 //            flagPWM = 0;
; 0000 0113 //            PORTD.7 = 1;
; 0000 0114 //            PIND.6 = 0;
; 0000 0115 //            if(pwm_value <= 65535) {
; 0000 0116 //                //#asm("cli")
; 0000 0117 //                OCR1AH = (pwm_value >> 8) & 0xFF; // Высший байт
; 0000 0118 //                OCR1AL = pwm_value & 0xFF; // Нижний байт
; 0000 0119 //                //#asm("sei")
; 0000 011A //            }
; 0000 011B //            else {
; 0000 011C //                //OCR1BH = 0;
; 0000 011D //                //OCR1BL = 0;
; 0000 011E //                previous_error = 0;
; 0000 011F //            }
; 0000 0120 //        }
; 0000 0121 //    previous_error =  error;
; 0000 0122 //    // OCR1AH = 0;
; 0000 0123 
; 0000 0124 }
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0125 }
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
