;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0

	.DSEG
;float my_abs(float value) {
; 0000 003B float my_abs(float value) {

	.CSEG
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003C return (value < 0) ? -value : value;
;PCODE: $00000065 VOL: 0
;	value -> Y+0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003D }
;PCODE: $00000072 VOL: 0
;interrupt [2] void ext_int0_isr(void)
; 0000 0044 {
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0045 if (PINB.4 == 1)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0046 {
; 0000 0047 ugol++;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0048 }
; 0000 0049 else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004A {
; 0000 004B ugol--;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 004C }
;PCODE: $00000082 VOL: 0
; 0000 004D 
; 0000 004E }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;interrupt [17] void timer0_ovf_isr(void)
; 0000 0051 
; 0000 0052 {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0053 
; 0000 0054 //sprintf(buffer, "%d", ugol);
; 0000 0055 //
; 0000 0056 //        puts(buffer);
; 0000 0057 //        PORTB |= (1 << PORTB5); // Установка высокого уровня на PB5
; 0000 0058 byte1 = (ugol >> 8) & 0xFF;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0059 byte2 = ugol & 0xFF;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 005A putchar(0x1c);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 005B putchar(byte1);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 005C putchar(byte2);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 005D byte1 = (pwm_value >> 8) & 0xFF;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 005E byte2 = pwm_value & 0xFF;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 005F putchar(0x2d);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0060 putchar(byte1);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0061 putchar(byte2);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0062 time12++;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0063 if(time12>16128)time12 = 0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0064 //       PORTB &= ~(1 << PORTB5);
; 0000 0065 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;void main(void)
; 0000 0069 {
;PCODE: $000000AD VOL: 0
; 0000 006A // Declare your local variables here
; 0000 006B 
; 0000 006C // Crystal Oscillator division factor: 1
; 0000 006D #pragma optsize-
; 0000 006E CLKPR=(1<<CLKPCE);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 006F CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0070 #ifdef _OPTIMIZE_SIZE_
; 0000 0071 #pragma optsize+
; 0000 0072 #endif
; 0000 0073 
; 0000 0074 // Input/Output Ports initialization
; 0000 0075 // Port B initialization
; 0000 0076 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0077 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0078 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0079 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 007A 
; 0000 007B // Port C initialization
; 0000 007C // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007D DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 007E // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007F PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0080 
; 0000 0081 // Port D initialization
; 0000 0082 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0083 DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0084 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0085 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0086 
; 0000 0087 // Timer/Counter 0 initialization
; 0000 0088 // Clock source: System Clock
; 0000 0089 // Clock value: 15,625 kHz
; 0000 008A // Mode: Normal top=0xFF
; 0000 008B // OC0A output: Disconnected
; 0000 008C // OC0B output: Disconnected
; 0000 008D // Timer Period: 16,384 ms
; 0000 008E TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 008F TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0090 TCNT0=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0091 OCR0A=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0092 OCR0B=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0093 
; 0000 0094 
; 0000 0095 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0096 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0097 
; 0000 0098 
; 0000 0099 // External Interrupt(s) initialization
; 0000 009A // INT0: On
; 0000 009B // INT0 Mode: Rising Edge
; 0000 009C // INT1: Off
; 0000 009D // Interrupt on any change on pins PCINT0-7: Off
; 0000 009E // Interrupt on any change on pins PCINT8-14: Off
; 0000 009F // Interrupt on any change on pins PCINT16-23: Off
; 0000 00A0 EICRA=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00A1 EIMSK=(0<<INT1) | (1<<INT0);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00A2 EIFR=(0<<INTF1) | (1<<INTF0);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00A3 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00A4 
; 0000 00A5 // USART initialization
; 0000 00A6 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00A7 // USART Receiver: Off
; 0000 00A8 // USART Transmitter: On
; 0000 00A9 // USART Mode: Asynchronous
; 0000 00AA // USART Baud Rate: 38400
; 0000 00AB UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00AC UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00AD UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00AE UBRR0H=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00AF UBRR0L=0x19;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00B0 
; 0000 00B1 // Timer/Counter 1 initialization
; 0000 00B2 // Clock source: System Clock
; 0000 00B3 // Clock value: 2000,000 kHz
; 0000 00B4 // Mode: Ph. correct PWM top=0x00FF
; 0000 00B5 // OC1A output: Non-Inverted PWM
; 0000 00B6 // OC1B output: Disconnected
; 0000 00B7 // Noise Canceler: Off
; 0000 00B8 // Input Capture on Falling Edge
; 0000 00B9 // Timer Period: 0,255 ms
; 0000 00BA // Output Pulse(s):
; 0000 00BB // OC1A Period: 0,255 ms Width: 0,127 ms
; 0000 00BC // Timer1 Overflow Interrupt: Off
; 0000 00BD // Input Capture Interrupt: Off
; 0000 00BE // Compare A Match Interrupt: Off
; 0000 00BF // Compare B Match Interrupt: Off
; 0000 00C0 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (1<<WGM10);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00C1 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00C2 TCNT1H=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00C3 TCNT1L=0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00C4 ICR1H=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00C5 ICR1L=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00C6 OCR1AH=0xFF;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00C7 OCR1AL=0xFA;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00C8 OCR1BH=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00C9 OCR1BL=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00CA // Timer/Counter 1 Interrupt(s) initialization
; 0000 00CB TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00CC #asm("sei")
;PCODE: $000000F2 VOL: 0
; 0000 00CD PIND.6=0;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00CE PORTB.5 = 1;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00CF PORTD.7 = 0;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00D0 PORTB.1 = 1;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00D1 //сделай график управления в режиме реального времени
; 0000 00D2 generSin();
;PCODE: $000000FB VOL: 0
; 0000 00D3 generSinUgol();
;PCODE: $000000FC VOL: 0
; 0000 00D4 
; 0000 00D5 
; 0000 00D6 while (1)
;PCODE: $000000FD VOL: 0
; 0000 00D7 {
; 0000 00D8 // result =A*datay[5];
; 0000 00D9 if(time12>16128)time12 =0;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00DA result = A*(int)(fix16_sin[(time12>>6)]>>2);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00DB //result = 1966080;
; 0000 00DC //result =  A*sin(0.016384*T*time12*2*PI);
; 0000 00DD error = (A*(int)((sin_ugol[ugol>>1]>>2)) -  result);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00DE //error =((int16_t)(A*sin(ugol/1.39*PI/180))) - result;
; 0000 00DF //error = (int16_t)(error>>2);
; 0000 00E0 // Вычисление интегральной составляющей
; 0000 00E1 integral += error * dt;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00E2 // Вычисление дифференциальной составляющей
; 0000 00E3 derivative = error - previous_error;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00E4 Y = (uint16_t)(my_abs(Kp * error + Ki * integral + Kd * derivative));
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00E5 pwm_value = (Y); // Преобразование float в uint16_t
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00E6 //error = 1;
; 0000 00E7 //OCR1AH = 0xFF; // Высший байт
; 0000 00E8 
; 0000 00E9 //OCR1AL = 254;
; 0000 00EA if (Y > 65535) {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00EB Y = 65535;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00EC 
; 0000 00ED }
; 0000 00EE if ((error<-1) && (flagPWM == 0)){
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00EF flagPWM = 1;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00F0 PORTD.7 = 0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00F1 PIND.6=1;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00F2 if(Y <= 65535){
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00F3 //#asm("cli")
; 0000 00F4 OCR1AH = (65535 >> 8) & 0xFF; // Высший байт
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00F5 OCR1AL = 65535 & 0xFF; // Нижний байт
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00F6 //#asm("sei")
; 0000 00F7 }
; 0000 00F8 }
;PCODE: $00000163 VOL: 0
; 0000 00F9 else if((error>1) && (flagPWM == 1)){
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00FA flagPWM = 0;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00FB PORTD.7 = 1;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00FC PIND.6 = 0;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00FD if(Y <= 65535) {
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00FE //#asm("cli")
; 0000 00FF OCR1AH = (65535 >> 8) & 0xFF; // Высший байт
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0100 OCR1AL = 65535 & 0xFF; // Нижний байт
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0101 //#asm("sei")
; 0000 0102 }
; 0000 0103 else {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0104 //OCR1BH = 0;
; 0000 0105 //OCR1BL = 0;
; 0000 0106 previous_error = 0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0107 }
;PCODE: $00000182 VOL: 0
; 0000 0108 }
; 0000 0109 previous_error =  error;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 010A // OCR1AH = 0;
; 0000 010B 
; 0000 010C }
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 010D }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
